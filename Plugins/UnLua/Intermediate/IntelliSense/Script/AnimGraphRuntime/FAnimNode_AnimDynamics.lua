---@class FAnimNode_AnimDynamics : FAnimNode_SkeletalControlBase
---@field public LinearDampingOverride number @Overridden linear damping value. The default is 0.7. Values below 0.7 won't have an effect.
---@field public AngularDampingOverride number @Overridden angular damping value. The default is 0.7. Values below 0.7 won't have an effect.
---@field public RelativeSpaceBone FBoneReference @When in BoneRelative sim space, the simulation will use this bone as the origin
---@field public BoundBone FBoneReference @The bone to attach the physics body to, if bChain is true this is the top of the chain
---@field public ChainEnd FBoneReference @If bChain is true this is the bottom of the chain, otherwise ignored
---@field public BoxExtents FVector @Extents of the box to use for simulation
---@field public LocalJointOffset FVector @Vector relative to the body being simulated to attach the constraint to
---@field public GravityScale number @Scale for gravity, higher values increase forces due to gravity
---@field public GravityOverride FVector @Gravity Override Value
---@field public LinearSpringConstant number @Spring constant to use when calculating linear springs, higher values mean a stronger spring. You need to enable the Linear Spring checkbox for this to have an effect.
---@field public AngularSpringConstant number @Spring constant to use when calculating angular springs, higher values mean a stronger spring. You need to enable the Angular Spring checkbox for this to have an effect. Note: Make sure to also set the Angular Target Axis and Angular Target in the Constraint Setup for this to have an effect.
---@field public WindScale number @Scale to apply to calculated wind velocities in the solver
---@field public ComponentLinearAccScale FVector @When using non-world-space sim, this controls how much of the components world-space acceleration is passed on to the local-space simulation.
---@field public ComponentLinearVelScale FVector @When using non-world-space sim, this applies a 'drag' to the bodies in the local space simulation, based on the components world-space velocity.
---@field public ComponentAppliedLinearAccClamp FVector @When using non-world-space sim, this is an overall clamp on acceleration derived from ComponentLinearAccScale and ComponentLinearVelScale, to ensure it is not too large.
---@field public AngularBiasOverride number @Overridden angular bias value Angular bias is essentially a twist reduction for chain forces and defaults to a value to keep chains stability in check. When using single-body systems sometimes angular forces will look like they are "catching-up" with the mesh, if that's the case override this and push it towards 1.0f until it settles correctly
---@field public NumSolverIterationsPreUpdate integer @Number of update passes on the linear and angular limits before we solve the position of the bodies recommended to be four times the value of NumSolverIterationsPostUpdate
---@field public NumSolverIterationsPostUpdate integer @Number of update passes on the linear and angular limits after we solve the position of the bodies, recommended to be around a quarter of NumSolverIterationsPreUpdate
---@field public ConstraintSetup FAnimPhysConstraintSetup @Data describing the constraints we will apply to the body
---@field public SphericalLimits TArray<FAnimPhysSphericalLimit> @List of available spherical limits for this node
---@field public SphereCollisionRadius number @Radius to use if CollisionType is set to CustomSphere
---@field public ExternalForce FVector @An external force to apply to all bodies in the simulation when ticked, specified in world space
---@field public PlanarLimits TArray<FAnimPhysPlanarLimit> @List of available planar limits for this node
---@field public CollisionType AnimPhysCollisionType @Resolution method for planar limits
---@field public SimulationSpace AnimPhysSimSpaceType @The space used to run the simulation
---@field public bUseSphericalLimits boolean @Whether to evaluate spherical limits
---@field public bUsePlanarLimit boolean @Whether to evaluate planar limits
---@field public bDoUpdate boolean @If true we will perform physics update, otherwise skip - allows visualisation of the initial state of the bodies
---@field public bDoEval boolean @If true we will perform bone transform evaluation, otherwise skip - allows visualisation of the initial anim state compared to the physics sim
---@field public bOverrideLinearDamping boolean @If true, the override value will be used for linear damping
---@field public bOverrideAngularBias boolean @If true, the override value will be used for the angular bias for bodies in this node. Angular bias is essentially a twist reduction for chain forces and defaults to a value to keep chains stability in check. When using single-body systems sometimes angular forces will look like they are "catching-up" with the mesh, if that's the case override this and push it towards 1.0f until it settles correctly
---@field public bOverrideAngularDamping boolean @If true, the override value will be used for angular damping
---@field public bEnableWind boolean @Whether or not wind is enabled for the bodies in this simulation
---@field public bUseGravityOverride boolean @Use gravity override value vs gravity scale
---@field public bLinearSpring boolean @If true the body will attempt to spring back to its initial position
---@field public bAngularSpring boolean @If true the body will attempt to align itself with the specified angular target
---@field public bChain boolean @Set to true to use the solver to simulate a connected chain
---@field public RetargetingSettings FRotationRetargetingInfo @The settings for rotation retargeting
local FAnimNode_AnimDynamics = {}
