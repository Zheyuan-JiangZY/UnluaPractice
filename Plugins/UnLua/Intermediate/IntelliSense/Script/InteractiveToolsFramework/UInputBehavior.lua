---An InputBehavior implements a state machine for a user interaction.
---The InputRouter maintains a set of active Behaviors, and when new input
---events occur, it calls WantsCapture() to check if the Behavior would like to
---begin capturing the applicable input event stream (eg for a mouse, one or both VR controllers, etc).
---If the Behavior acquires capture, UpdateCapture() is called until the Behavior
---indicates that it wants to release the device, or until the InputRouter force-terminates
---the capture via ForceEndCapture().
---For example, something like ButtonSetClickBehavior might work as follows:
---   - in WantsCapture(), if left mouse is pressed and a button is under cursor, return Begin, otherwise Ignore
---   - in BeginCapture(), save identifier for button that is under cursor
---   - in UpdateCapture()
---       - if left mouse is down, return Continue
---       - if left mouse is released:
---           - if saved button is still under cursor, call button.Clicked()
---           - return End
---Written sufficiently generically, the above Behavior doesn't need to know about buttons,
---it just needs to know how to hit-test the clickable object(s). Similarly separate
---Behaviors can be written for mouse, VR, touch, gamepad, etc.
---Implementing interactions in this way allows the input handling to be separated from functionality.
---@class UInputBehavior : UObject
local UInputBehavior = {}

