---Behavior Tree service nodes is designed to perform "background" tasks that update AI's knowledge.
---Services are being executed when underlying branch of behavior tree becomes active,
---but unlike tasks they don't return any results and can't directly affect execution flow.
---Usually they perform periodical checks (see TickNode) and often store results in blackboard.
---If any decorator node below requires results of check beforehand, use OnSearchStart function.
---Keep in mind that any checks performed there have to be instantaneous!
---Other typical use case is creating a marker when specific branch is being executed
---(see OnBecomeRelevant, OnCeaseRelevant), by setting a flag in blackboard.
---Because some of them can be instanced for specific AI, following virtual functions are not marked as const:
---- OnBecomeRelevant (from UBTAuxiliaryNode)
---- OnCeaseRelevant (from UBTAuxiliaryNode)
---- TickNode (from UBTAuxiliaryNode)
---- OnSearchStart
---If your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!
---Template nodes are shared across all behavior tree components using the same tree asset and must store
---their runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )
---@class UBTService : UBTAuxiliaryNode
---@field protected Interval number @defines time span between subsequent ticks of the service
---@field protected RandomDeviation number @adds random range to service's Interval
---@field protected bCallTickOnSearchStart boolean @call Tick event when task search enters this node (SearchStart will be called as well)
---@field protected bRestartTimerOnEachActivation boolean @if set, next tick time will be always reset to service's interval when node is activated
local UBTService = {}

