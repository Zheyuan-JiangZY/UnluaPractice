---Rendering settings.
---@class URendererSettings : UDeveloperSettings
---@field public bMobileDisableVertexFog boolean @If true, vertex fog will be omitted from all mobile shaders. If your game does not use fog, you should choose this setting to increase shading performance.
---@field public MaxMobileCascades integer @The maximum number of cascades with which to render dynamic directional light shadows when using the mobile renderer.
---@field public MobileMSAASampleCount integer @Multi-sample anti-aliasing setting to use on mobile. MSAA is currently supported using Metal on iOS, and on Android devices with the required support using ES 2 or ES 3.1. If MSAA is not available, the current default AA method will be used.
---@field public bMobileAllowDitheredLODTransition boolean @Whether to support 'Dithered LOD Transition' material option on mobile platforms. Enabling this may degrade performance as rendering will not benefit from Early-Z optimization.
---@field public bMobileAllowSoftwareOcclusionCulling boolean @Whether to support 'Software Occlusion Culling' on mobile platforms. This will package occluder information and enable Software Occlusion Culling.
---@field public bMobileVirtualTextures boolean @Whether to support Virtual Textures on mobile. Requires general Virtual Texturing option enabled as well. Changing this setting requires restarting the editor.
---@field public bDiscardUnusedQualityLevels boolean @When running in game mode, whether to keep shaders for all quality levels in memory or only those needed for the current quality level. Unchecked: Keep all quality levels in memory allowing a runtime quality level change. (default) Checked: Discard unused quality levels when loading content for the game, saving some memory.
---@field public bOcclusionCulling boolean @Allows occluded meshes to be culled and not rendered.
---@field public MinScreenRadiusForLights number @Screen radius at which lights are culled. Larger values can improve performance but causes lights to pop off when they affect a small area of the screen.
---@field public MinScreenRadiusForEarlyZPass number @Screen radius at which objects are culled for the early Z pass. Larger values can improve performance but very large values can degrade performance if large occluders are not rendered.
---@field public MinScreenRadiusForCSMdepth number @Screen radius at which objects are culled for cascaded shadow map depth passes. Larger values can improve performance but can cause artifacts as objects stop casting shadows.
---@field public bPrecomputedVisibilityWarning boolean @Displays a warning when no precomputed visibility data is available for the current camera location. This can be helpful if you are making a game that relies on precomputed visibility, e.g. a first person mobile game.
---@field public bTextureStreaming boolean @When enabled textures will stream in based on what is visible on screen.
---@field public bUseDXT5NormalMaps boolean @Whether to use DXT5 for normal maps, otherwise BC5 will be used, which is not supported on all hardware. Changing this setting requires restarting the editor.
---@field public bVirtualTextures boolean @When enabled, Textures can be streamed using the virtual texture system. Changing this setting requires restarting the editor.
---@field public bVirtualTextureEnableAutoImport boolean @Set the 'Virtual Texture Streaming' setting for imported textures based on 'Auto Virtual Texturing Size' in the texture import settings.
---@field public bVirtualTexturedLightmaps boolean @When enabled, lightmaps will be streamed using the virtual texture system. Changing this setting requires restarting the editor.
---@field public VirtualTextureTileSize integer @Size in pixels for virtual texture tiles, will be rounded to next power-of-2. Changing this setting requires restarting the editor.
---@field public VirtualTextureTileBorderSize integer @Size in pixels for virtual texture tile borders, will be rounded to next power-of-2. Larger borders allow higher degree of anisotropic filtering, but uses more disk/cache memory. Changing this setting requires restarting the editor.
---@field public VirtualTextureFeedbackFactor integer @Lower factor will increase virtual texture feedback resolution which increases CPU/GPU overhead, but may decrease streaming latency, especially if materials use many virtual textures. Changing this setting requires restarting the editor.
---@field public bVirtualTextureEnableCompressZlib boolean @Use zlib to compress virtual textures. Changing this setting requires restarting the editor.
---@field public bVirtualTextureEnableCompressCrunch boolean @Use Crunch library to compress virtual textures for supported formats, this is a lossy compression format that gives much better ratio than zlib. Changing this setting requires restarting the editor.
---@field public bClearCoatEnableSecondNormal boolean @Use a separate normal map for the bottom layer of a clear coat material. This is a higher quality feature that is expensive.
---@field public ReflectionCaptureResolution integer @The cubemap resolution for all reflection capture probes. Must be power of 2. Note that for very high values the memory and performance impact may be severe.
---@field public bReflectionCaptureCompression boolean @Whether to use the Reflection Capture Compression or not for mobile. It will use ETC2 format to do the compression.
---@field public ReflectionEnvironmentLightmapMixBasedOnRoughness boolean @Whether to reduce lightmap mixing with reflection captures for very smooth surfaces.  This is useful to make sure reflection captures match SSR / planar reflections in brightness.
---@field public bForwardShading boolean @Whether to use forward shading on desktop platforms, requires Shader Model 5 hardware.  Forward shading supports MSAA and has lower default cost, but fewer features supported overall.  Materials have to opt-in to more expensive features like high quality reflections.  Changing this setting requires restarting the editor.
---@field public bVertexFoggingForOpaque boolean @Causes opaque materials to use per-vertex fogging, which costs slightly less.  Only supported with forward shading. Changing this setting requires restarting the editor.
---@field public bAllowStaticLighting boolean @Whether to allow any static lighting to be generated and used, like lightmaps and shadowmaps. Games that only use dynamic lighting should set this to 0 to save some static lighting overhead. Changing this setting requires restarting the editor.
---@field public bUseNormalMapsForStaticLighting boolean @Whether to allow any static lighting to use normal maps for lighting computations.
---@field public bGenerateMeshDistanceFields boolean @Whether to build distance fields of static meshes, needed for distance field AO, which is used to implement Movable SkyLight shadows, and ray traced distance field shadows on directional lights.  Enabling will increase mesh build times and memory usage.  Changing this setting requires restarting the editor.
---@field public bEightBitMeshDistanceFields boolean @Whether to store mesh distance fields in an 8 bit fixed point format instead of 16 bit floating point.  8 bit uses half the memory, but introduces artifacts for large meshes or thin meshes.  Changing this setting requires restarting the editor.
---@field public bGenerateLandscapeGIData boolean @Whether to generate a low-resolution base color texture for landscapes for rendering real-time global illumination.  This feature requires GenerateMeshDistanceFields is also enabled, and will increase mesh build times and memory usage.
---@field public bCompressMeshDistanceFields boolean @Whether to store mesh distance fields compressed in memory, which reduces how much memory they take, but also causes serious hitches when making new levels visible.  Only enable if your project does not stream levels in-game.  Changing this setting requires restarting the editor.
---@field public TessellationAdaptivePixelsPerTriangle number @When adaptive tessellation is enabled it will try to tessellate a mesh so that each triangle contains the specified number of pixels. The tessellation multiplier specified in the material can increase or decrease the amount of tessellation.
---@field public bSeparateTranslucency boolean @Allow translucency to be rendered to a separate render targeted and composited after depth of field. Prevents translucency from appearing out of focus.
---@field public TranslucentSortPolicy integer @The sort mode for translucent primitives, affecting how they are ordered and how they change order as the camera moves. Requires that Separate Translucency (under Postprocessing) is true.
---@field public TranslucentSortAxis FVector @The axis that sorting will occur along when Translucent Sort Policy is set to SortAlongAxis.
---@field public HMDFixedFoveationLevel integer @Set the level of fixed-foveation to apply when generating the Variable Rate Shading attachment. This feature is currently experimental. This can yield some fairly significant performance benefits on GPUs that support Tier 2 VRS. Lower settings will result in almost no discernible artifacting on most HMDs; higher settings will show some artifacts towards the edges of the view.
---@field public CustomDepthStencil integer @Whether the custom depth pass for tagging primitives for postprocessing passes is enabled. Enabling it on demand can save memory but may cause a hitch the first time the feature is used.
---@field public bCustomDepthTaaJitter boolean @Whether the custom depth pass has the TemporalAA jitter enabled. Disabling this can be useful when the result of the CustomDepth Pass is used after TAA (e.g. after Tonemapping)
---@field public bEnableAlphaChannelInPostProcessing integer @Configures alpha channel support in renderer's post processing chain. Still experimental: works only with Temporal AA, Motion Blur, Circle Depth Of Field. This option also force disable the separate translucency.
---@field public bDefaultFeatureBloom boolean @Whether the default for Bloom is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureAmbientOcclusion boolean @Whether the default for AmbientOcclusion is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureAmbientOcclusionStaticFraction boolean @Whether the default for AmbientOcclusionStaticFraction is enabled or not (only useful for baked lighting and if AO is on, allows to have SSAO affect baked lighting as well, costs performance, postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureAutoExposure boolean @Whether the default for AutoExposure is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public DefaultFeatureAutoExposure integer @The default method for AutoExposure(postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public DefaultFeatureAutoExposureBias number @Default Value for auto exposure bias.
---@field public bExtendDefaultLuminanceRangeInAutoExposureSettings boolean @Whether the default values for AutoExposure should support an extended range of scene luminance. Also changes the exposure settings to be expressed in EV100.
---@field public bUsePreExposure boolean @Whether to use pre-exposure to remap the range of the scene color around the camera exposure. This limits the render target range required to support HDR lighting value.
---@field public bEnablePreExposureOnlyInTheEditor boolean @Whether pre-exposure should be an editor only feature. This is to because it currently has an impact on the renderthread performance.
---@field public bDefaultFeatureMotionBlur boolean @Whether the default for MotionBlur is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bDefaultFeatureLensFlare boolean @Whether the default for LensFlare is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)
---@field public bTemporalUpsampling boolean @Whether to do primary screen percentage with temporal AA or not.
---@field public bSSGI boolean @Whether enable screen space global illumination.
---@field public DefaultFeatureAntiAliasing integer @Which anti-aliasing mode is used by default
---@field public DefaultLightUnits ELightUnits @Which units to use for newly placed point, spot and rect lights
---@field public DefaultBackBufferPixelFormat integer @Pixel format used for back buffer, when not specified
---@field public bRenderUnbuiltPreviewShadowsInGame boolean @Whether to render unbuilt preview shadows in game.  When enabled and lighting is not built, expensive preview shadows will be rendered in game.  When disabled, lighting in game and editor won't match which can appear to be a bug.
---@field public bStencilForLODDither boolean @Whether to use stencil for LOD dither fading.  This saves GPU time in the base pass for materials with dither fading enabled, but forces a full prepass. Changing this setting requires restarting the editor.
---@field public EarlyZPass integer @Whether to use a depth only pass to initialize Z culling for the base pass.
---@field public bEarlyZPassOnlyMaterialMasking boolean @Whether to compute materials' mask opacity only in early Z pass. Changing this setting requires restarting the editor.
---@field public bDBuffer boolean @Whether to accumulate decal properties to a buffer before the base pass.  DBuffer decals correctly affect lightmap and sky lighting, unlike regular deferred decals.  DBuffer enabled forces a full prepass.  Changing this setting requires restarting the editor.
---@field public ClearSceneMethod integer @Select how the g-buffer is cleared in game mode (only affects deferred shading).
---@field public bBasePassOutputsVelocity boolean @Enables emitting velocity during Base Pass rendering. Changing this setting requires restarting the editor. Note: enabling this behaves as if 'Output velocities due to vertex deformation' (r.VertexDeformationOutputsVelocity) is also enabled.
---@field public bVertexDeformationOutputsVelocity boolean @Enables materials with World Position Offset and/or World Displacement to output velocities during velocity pass even when the actor has not moved. This incurs a performance cost and can be quite significant if many objects are using WPO, such as a forest of trees - in that case consider 'Output velocities during base pass' (r.BasePassOutputsVelocity) and disabling this option.
---@field public bSelectiveBasePassOutputs boolean @Enables not exporting to the GBuffer rendertargets that are not relevant. Changing this setting requires restarting the editor.
---@field public bDefaultParticleCutouts boolean @When enabled, after changing the material on a Required particle module a Particle Cutout texture will be chosen automatically from the Opacity Mask texture if it exists, if not the Opacity Texture will be used if it exists.
---@field public GPUSimulationTextureSizeX integer @The X size of the GPU simulation texture size. SizeX*SizeY determines the maximum number of GPU simulated particles in an emitter. Potentially overridden by CVar settings in BaseDeviceProfile.ini.
---@field public GPUSimulationTextureSizeY integer @The Y size of the GPU simulation texture size. SizeX*SizeY determines the maximum number of GPU simulated particles in an emitter. Potentially overridden by CVar settings in BaseDeviceProfile.ini.
---@field public bGlobalClipPlane boolean @Whether to support the global clip plane needed for planar reflections.  Enabling this increases BasePass triangle cost by ~15% regardless of whether planar reflections are active. Changing this setting requires restarting the editor.
---@field public GBufferFormat integer @Selects which GBuffer format should be used. Affects performance primarily via how much GPU memory bandwidth used.
---@field public bUseGPUMorphTargets boolean @Whether to use original CPU method (loop per morph then by vertex) or use a GPU-based method on Shader Model 5 hardware.
---@field public bNvidiaAftermathEnabled boolean @Enables vendor specific GPU crash analysis tools.
---@field public bMultiView boolean @Enable single-pass stereoscopic rendering through view instancing or draw call instancing.
---@field public bMobilePostProcessing boolean @If true, mobile pipelines include a full post-processing pass with tonemapping. Disable this setting for a performance boost and to enable stereoscopic rendering optimizations. Changing this setting requires restarting the editor.
---@field public bMobileMultiView boolean @Enable single-pass stereoscopic rendering on mobile platforms.
---@field public bMobileUseHWsRGBEncoding boolean @If true then mobile single-pass (without post-processing) rendering will use HW accelerated sRGB encoding/decoding. Available only on Oculus for now.
---@field public bRoundRobinOcclusion boolean @Enable round-robin scheduling of occlusion queries for VR.
---@field public bODSCapture boolean @Enable Omni-directional Stereo Capture.
---@field public bMeshStreaming boolean @When enabled mesh will stream in based on what is visible on screen.
---@field public WireframeCullThreshold number @Screen radius at which wireframe objects are culled. Larger values can improve performance when viewing a scene in wireframe.
---@field public bEnableRayTracing boolean @Enable Ray Tracing capabilities.  Requires 'Support Compute Skincache' before project is allowed to set this.
---@field public bEnableRayTracingTextureLOD boolean @Enable automatic texture mip level selection in ray tracing material shaders. Unchecked: highest resolution mip level is used for all texture (default). Checked: texture LOD is approximated based on total ray length, output resolution and texel density at hit point (ray cone method).
---@field public bSupportStationarySkylight boolean @"Stationary skylight requires permutations of the basepass shaders.  Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."
---@field public bSupportLowQualityLightmaps boolean @"Low quality lightmap requires permutations of the lightmap rendering shaders.  Disabling will reduce the number of shader permutations required per material. Note that the mobile renderer requires low quality lightmaps, so disabling this setting is not recommended for mobile titles using static lighting. Changing this setting requires restarting the editor."
---@field public bSupportPointLightWholeSceneShadows boolean @PointLight WholeSceneShadows requires many vertex and geometry shader permutations for cubemap rendering. Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."
---@field public bSupportAtmosphericFog boolean @"Atmospheric fog requires permutations of the basepass shaders.  Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."
---@field public bSupportSkyAtmosphere boolean @The sky atmosphere component requires extra samplers/textures to be bound to apply aerial perspective on transparent surfaces (and all surfaces on mobile via per vertex evaluation).
---@field public bSupportSkyAtmosphereAffectsHeightFog boolean @The sky atmosphere component can light up the height fog but it requires extra samplers/textures to be bound to apply aerial perspective on transparent surfaces (and all surfaces on mobile via per vertex evaluation). It requires r.SupportSkyAtmosphere to be true.
---@field public bSupportSkinCacheShaders boolean @Cannot be disabled while Ray Tracing is enabled as it is then required.
---@field public DefaultSkinCacheBehavior ESkinCacheDefaultBehavior @Default behavior if all skeletal meshes are included/excluded from the skin cache. If Ray Tracing is enabled, will force inclusive behavior.
---@field public SkinCacheSceneMemoryLimitInMB number @Maximum amount of memory (in MB) per world/scene allowed for the Compute Skin Cache to generate output vertex data and recompute tangents.
---@field public bMobileEnableStaticAndCSMShadowReceivers boolean @Allow primitives to receive both static and CSM shadows from a stationary light. Disabling will free a mobile texture sampler and reduce shader permutations. Changing this setting requires restarting the editor.
---@field public bMobileEnableMovableLightCSMShaderCulling boolean @Primitives lit by a movable directional light will render with the CSM shader only when determined to be within CSM range. Changing this setting requires restarting the editor.
---@field public bMobileAllowDistanceFieldShadows boolean @Generate shaders for static primitives render Lightmass-baked distance field shadow maps from stationary directional lights. Changing this setting requires restarting the editor.
---@field public bMobileAllowMovableDirectionalLights boolean @Generate shaders for primitives to receive movable directional lights. Changing this setting requires restarting the editor.
---@field public MobileNumDynamicPointLights integer @The number of dynamic spotlights or point lights to support on mobile devices. Setting this to 0 for games which do not require dynamic spotlights or point lights will reduce the number of shaders generated. Changing this setting requires restarting the editor.
---@field public bMobileDynamicPointLightsUseStaticBranch boolean @If this setting is enabled, the same shader will be used for any number of dynamic spotlights or point lights (up to the maximum specified above) hitting a surface. This is slightly slower but reduces the number of shaders generated. Changing this setting requires restarting the editor.
---@field public bMobileAllowMovableSpotlights boolean @Generate shaders for primitives to receive lighting from movable spotlights. This incurs an additional cost when processing movable lights. Changing this setting requires restarting the editor.
---@field public bMobileAllowMovableSpotlightShadows boolean @Generate shaders for primitives to receive shadow from movable spotlights. Changing this setting requires restarting the editor.
---@field public bSupport16BitBoneIndex boolean @If enabled, a new mesh imported will use 8 bit (if <=256 bones) or 16 bit (if > 256 bones) bone indices for rendering.
---@field public bGPUSkinLimit2BoneInfluences boolean @Whether to use 2 bone influences instead of the default of 4 for GPU skinning. This does not change skeletal mesh assets but reduces the number of instructions required by the GPU skin vertex shaders. Changing this setting requires restarting the editor.
---@field public bSupportDepthOnlyIndexBuffers boolean @Support depth-only index buffers, which provide a minor rendering speedup at the expense of using twice the index buffer memory.
---@field public bSupportReversedIndexBuffers boolean @Support reversed index buffers, which provide a minor rendering speedup at the expense of using twice the index buffer memory.
---@field public bLPV boolean @Whether to allow the usage and compilation of Light Propagation Volumes.
---@field public bMobileAmbientOcclusion boolean @Mobile Ambient Occlusion. Causion: An extra sampler will be occupied in mobile base pass pixel shader after enable the mobile ambient occlusion. Changing this setting requires restarting the editor.
---@field public bUseUnlimitedBoneInfluences boolean @If enabled, a new mesh imported will use unlimited bone buffer instead of fixed MaxBoneInfluences for rendering.
---@field public UnlimitedBonInfluencesThreshold integer @When Unlimited Bone Influence is enabled, it still uses a fixed bone inflence buffer until the max bone influence of a mesh exceeds this value
---@field public MaxSkinBones FPerPlatformInt @Max number of bones that can be skinned on the GPU in a single draw call. The default value is set by the Compat.MAX_GPUSKIN_BONES consolevariable. Changing this setting requires restarting the editor.
---@field public MobilePlanarReflectionMode integer @The PlanarReflection will work differently on different mode on mobile platform, choose the proper mode as expect. Changing this setting requires restarting the editor.
---@field public bMobileSupportsGen4TAA boolean @Support desktop Gen4 TAA with mobile rendering. Changing this setting requires restarting the editor.
---@field public bStreamSkeletalMeshLODs FPerPlatformBool @Whether to stream skeletal mesh LODs by default.
---@field public bDiscardSkeletalMeshOptionalLODs FPerPlatformBool @Whether to discard skeletal mesh LODs below minimum LOD levels at cook time.
---@field public VisualizeCalibrationColorMaterialPath FSoftObjectPath @When the VisualizeCalibrationColor show flag is enabled, this path will be used as the post-process material to render.
---@field public VisualizeCalibrationCustomMaterialPath FSoftObjectPath @When the VisualizeCalibrationCustom show flag is enabled, this path will be used as the post-process material to render.
---@field public VisualizeCalibrationGrayscaleMaterialPath FSoftObjectPath @When the VisualizeCalibrationGrayscale show flag is enabled, this path will be used as the post-process material to render.
local URendererSettings = {}

