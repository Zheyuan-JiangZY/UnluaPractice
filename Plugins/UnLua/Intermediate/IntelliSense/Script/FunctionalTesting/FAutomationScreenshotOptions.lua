---@class FAutomationScreenshotOptions
---@field public Resolution FVector2D @The desired resolution of the screenshot, if none is provided, it will use the default for the platform setup in the automation settings.
---@field public Delay number @The delay before we take the screenshot.
---@field public bOverride_OverrideTimeTo boolean
---@field public OverrideTimeTo number @Overrides World Time, Real Time to the value provided.  Sets Delta Time to 0.  Only affects the time being sent to the render thread and materials.  The time accumulating on the game thread is unaffected.
---@field public bDisableNoisyRenderingFeatures boolean @Disables Anti-Aliasing, Motion Blur, Screen Space Reflections, Eye Adaptation, Tonemapper and Contact Shadows, because those features contribute a lot to the noise in the final rendered image.  If you're explicitly looking for changes
---@field public bDisableTonemapping boolean @Disables Eye Adaptation and sets Tonemapper to fixed gamma curve. Should generally be on unless testing tone mapping or other post-processing results
---@field public ViewSettings UAutomationViewSettings @Assign custom view settings to control which rendering options we allow on while taking the screenshot.
---@field public VisualizeBuffer string @Allows you to screenshot a buffer other than the default final lit scene image.  Useful if you're trying to build a test for a specific GBuffer, that may be harder to tell if errors are introduced in it.
---@field public Tolerance EComparisonTolerance @These are quick defaults for tolerance levels, we default to low, because generally there's some constant variability in every pixel's color introduced by TxAA.
---@field public ToleranceAmount FComparisonToleranceAmount @For each channel and brightness levels you can control a region where the colors are found to be essentially the same.  Generally this is necessary as modern rendering techniques tend to introduce noise constantly to hide aliasing.
---@field public MaximumLocalError number @After you've accounted for color tolerance changes, you now need to control for local acceptable error. Which depending on how pixels were colored on triangle edges may be a few percent of the image being outside the tolerance levels.  Unlike the MaximumGlobalError, the MaximumLocalError works by focusing on a smaller subset of the image.  These chunks will have be compared to the local error, in an attempt to locate hot spots of change that are important, that would be ignored by the global error.
---@field public MaximumGlobalError number @After you've accounted for color tolerance changes, you now need to control for total acceptable error. Which depending on how pixels were colored on triangle edges may be a few percent of the image being outside the tolerance levels.
---@field public bIgnoreAntiAliasing boolean @If this is true, we search neighboring pixels looking for the expected pixel as what may have happened, is that the pixel shifted a little.
---@field public bIgnoreColors boolean @If this is true, all we compare is luminance of the scene.
local FAutomationScreenshotOptions = {}
